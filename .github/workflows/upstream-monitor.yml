name: Upstream Dependency Monitor

on:
  schedule:
    - cron: '0 6 * * 1,4'  # Monday and Thursday 6 AM UTC
  workflow_dispatch:

env:
  CURRENT_RCLONE_VERSION: "1.71.0"
  CURRENT_BASE_VERSION: "3.22"

jobs:
  monitor-rclone:
    name: "Monitor rclone Releases"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check Latest rclone Release
        id: check-rclone-release
        uses: actions/github-script@v8
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: 'rclone',
              repo: 'rclone'
            });

            const currentVersion = process.env.CURRENT_RCLONE_VERSION;
            const latestVersion = release.tag_name;

            console.log(`Current version: ${currentVersion}`);
            console.log(`Latest version: ${latestVersion}`);

            const needsUpdate = latestVersion !== currentVersion;

            core.setOutput('needs-update', needsUpdate);
            core.setOutput('new-version', latestVersion);
            core.setOutput('release-url', release.html_url);
            core.setOutput('release-notes', (release.body || 'No release notes available').replace(/`/g, '\\`').replace(/\$/g, '\\$'));

            return { needsUpdate, currentVersion, latestVersion };

      - name: Create rclone Update Issue
        if: steps.check-rclone-release.outputs.needs-update == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const newVersion = `${{ steps.check-rclone-release.outputs.new-version }}`;
            const currentVersion = process.env.CURRENT_RCLONE_VERSION;
            const releaseUrl = `${{ steps.check-rclone-release.outputs.release-url }}`;
            const releaseNotes = `${{ steps.check-rclone-release.outputs.release-notes }}`;

            const issueTitle = `üîÑ Upstream Update Available: rclone ${newVersion}`;
            const issueBody = [
              '## üì¶ New rclone Release Available',
              '',
              `**Current Version:** \`${currentVersion}\``,
              `**Latest Version:** \`${newVersion}\``,
              `**Release URL:** ${releaseUrl}`,
              '',
              '### üìã Release Notes',
              releaseNotes,
              '',
              '### üîß Update Checklist',
              '- [ ] Review release notes for breaking changes',
              '- [ ] Update Dockerfile RCLONE_VERSION',
              '- [ ] Update .env.example default version',
              '- [ ] Run security scans',
              '- [ ] Test container functionality',
              '- [ ] Update documentation if needed',
              '',
              '### ü§ñ Automation Status',
              'This issue was automatically created by the upstream monitoring workflow.',
              '',
              '**Next Steps:**',
              '1. Review the release notes above',
              '2. If safe to update, create a PR with the version bump',
              '3. Ensure all security scans pass',
              '4. Test the updated container',
              '5. Close this issue when complete',
              '',
              '---',
              '**Labels:** `upstream-update`, `rclone`, `automation`'
            ].join('\n');

            // Check if issue already exists
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'upstream-update,rclone'
            });

            const existingIssue = existingIssues.find(issue =>
              issue.title.includes(newVersion)
            );

            if (existingIssue) {
              console.log(`Issue already exists for version ${newVersion}: #${existingIssue.number}`);
              return;
            }

            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['upstream-update', 'rclone', 'automation']
            });

            console.log(`Created issue #${issue.number} for rclone ${newVersion}`);

  monitor-baseimage:
    name: "Monitor LinuxServer.io Base Image"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Check LinuxServer.io Base Image Updates
        id: check-base
        run: |
          # Get current base image version from Dockerfile
          CURRENT_BASE=$(grep "FROM.*baseimage-alpine" Dockerfile | head -1 | cut -d':' -f2)
          echo "current-base=${CURRENT_BASE}" >> $GITHUB_OUTPUT

          # Check for latest 3.22 series release
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/linuxserver/docker-baseimage-alpine/releases" | \
            jq -r '[.[] | select(.tag_name | startswith("3.22-")) | .tag_name][0]')

          echo "latest-base=${LATEST_RELEASE}" >> $GITHUB_OUTPUT
          echo "Current base: ${CURRENT_BASE}"
          echo "Latest base: ${LATEST_RELEASE}"

          if [ "${CURRENT_BASE}" != "${LATEST_RELEASE}" ]; then
            echo "needs-update=true" >> $GITHUB_OUTPUT
          else
            echo "needs-update=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Base Image Update Issue
        if: steps.check-base.outputs.needs-update == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const currentBase = '${{ steps.check-base.outputs.current-base }}';
            const latestBase = '${{ steps.check-base.outputs.latest-base }}';

            const issueTitle = `‚ö†Ô∏è LinuxServer.io Base Image Update Available: ${latestBase}`;
            const issueBody = [
              '## üêß LinuxServer.io Base Image Update Available',
              '',
              `**Current Version:** \`${currentBase}\``,
              `**Latest Version:** \`${latestBase}\``,
              '**Repository:** https://github.com/linuxserver/docker-baseimage-alpine',
              '',
              '### ‚ö†Ô∏è Manual Review Required',
              '',
              'LinuxServer.io base image updates require manual review due to potential breaking changes.',
              '',
              '### üîß Update Checklist',
              '- [ ] Review LinuxServer.io release notes and changelogs',
              '- [ ] Check for Alpine Linux security updates',
              '- [ ] Test S6 Overlay compatibility',
              '- [ ] Verify custom services still work correctly',
              '- [ ] Update Dockerfile FROM statement',
              '- [ ] Run comprehensive security scans',
              '- [ ] Test container functionality thoroughly',
              '- [ ] Update documentation if needed',
              '',
              '### üîç Security Considerations',
              '- Check if this is a security-related update',
              '- Verify no breaking changes in S6 Overlay',
              '- Test all custom init scripts',
              '- Validate file permissions and user setup',
              '',
              '### ü§ñ Automation Status',
              'This issue was automatically created by the upstream monitoring workflow.',
              '',
              '**‚ö° Action Required:** This update requires manual review and testing before implementation.',
              '',
              '---',
              '**Labels:** `upstream-update`, `baseimage`, `manual-review`, `security`'
            ].join('\n');

            // Check if issue already exists
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'upstream-update,baseimage'
            });

            const existingIssue = existingIssues.find(issue =>
              issue.title.includes(latestBase)
            );

            if (existingIssue) {
              console.log(`Issue already exists for base image ${latestBase}: #${existingIssue.number}`);
              return;
            }

            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['upstream-update', 'baseimage', 'manual-review', 'security']
            });

            console.log(`Created issue #${issue.number} for base image ${latestBase}`);

  security-check:
    name: "Security Impact Assessment"
    runs-on: ubuntu-latest
    needs: [monitor-rclone, monitor-baseimage]
    if: always()

    steps:
      - name: Security Assessment Summary
        run: |
          echo "## üîê Security Assessment Summary"
          echo ""
          echo "**rclone Check:** ${{ needs.monitor-rclone.result }}"
          echo "**Base Image Check:** ${{ needs.monitor-baseimage.result }}"
          echo ""
          echo "### üìã Recommendations"
          echo "- Monitor created issues for security-related updates"
          echo "- Prioritize security patches and CVE fixes"
          echo "- Run comprehensive security scans before deployment"
          echo "- Test all functionality after updates"
          echo ""
          echo "### üö® High Priority Updates"
          echo "Any updates labeled with 'security' should be prioritized for immediate review."