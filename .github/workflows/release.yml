name: Create Release

on:
  workflow_dispatch:
    inputs:
      rclone_tag:
        description: 'rclone tag to release (e.g., 1.71.0)'
        required: true
        type: string
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string
        default: ''

env:
  REGISTRY_DOCKER: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: mildman1848/rclone

jobs:
  validate-tag:
    name: Validate rclone Tag
    runs-on: ubuntu-latest
    outputs:
      tag_exists: ${{ steps.check_tag.outputs.tag_exists }}
      release_version: ${{ steps.check_tag.outputs.release_version }}
    steps:
      - name: Check if rclone tag exists
        id: check_tag
        run: |
          TAG="${{ github.event.inputs.rclone_tag }}"
          echo "Checking if tag $TAG exists in rclone/rclone repository..."

          # Check if tag exists in the original repository
          if curl -s -f "https://api.github.com/repos/rclone/rclone/git/refs/tags/$TAG" > /dev/null; then
            echo "✅ Tag $TAG exists in rclone/rclone"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "release_version=$TAG" >> $GITHUB_OUTPUT
          else
            echo "❌ Tag $TAG does not exist in rclone/rclone"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: validate-tag
    if: needs.validate-tag.outputs.tag_exists == 'true'
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Update VERSION file with release tag
        run: |
          # Extract version without 'v' prefix for VERSION file
          RELEASE_VERSION="${{ needs.validate-tag.outputs.release_version }}"
          VERSION_NUMBER=${RELEASE_VERSION#v}
          echo "$VERSION_NUMBER" > VERSION
          echo "Updated VERSION file to: $VERSION_NUMBER"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.validate-tag.outputs.release_version }}
            type=raw,value=latest

      - name: Get version information
        id: version_info
        run: |
          # Get rclone version from input
          RCLONE_VERSION="${{ github.event.inputs.rclone_tag }}"
          echo "rclone_version=${RCLONE_VERSION}" >> $GITHUB_OUTPUT
          echo "rclone version: ${RCLONE_VERSION}"

          # Get project version from VERSION file
          PROJECT_VERSION=$(cat VERSION)
          echo "project_version=${PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "Project version: ${PROJECT_VERSION}"

          # Generate timestamp
          TIMESTAMP=$(date -u +'%Y%m%d%H%M%S')
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Generate platform-specific tags
        id: platform_tags
        run: |
          # Convert platform to safe tag format (linux/amd64 -> amd64)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/linux\///g' | sed 's/\//-/g')
          echo "platform_tag=${PLATFORM_TAG}" >> $GITHUB_OUTPUT

          # Create platform-specific image names for release
          DOCKER_PLATFORM_IMAGE="${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:${PLATFORM_TAG}-${{ needs.validate-tag.outputs.release_version }}"
          GHCR_PLATFORM_IMAGE="${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${PLATFORM_TAG}-${{ needs.validate-tag.outputs.release_version }}"

          echo "docker_platform_image=${DOCKER_PLATFORM_IMAGE}" >> $GITHUB_OUTPUT
          echo "ghcr_platform_image=${GHCR_PLATFORM_IMAGE}" >> $GITHUB_OUTPUT

      - name: Build and push release image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ steps.platform_tags.outputs.docker_platform_image }}
            ${{ steps.platform_tags.outputs.ghcr_platform_image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ needs.validate-tag.outputs.release_version }}
            VCS_REF=${{ github.sha }}
            RCLONE_VERSION=${{ steps.version_info.outputs.rclone_version }}
            PROJECT_VERSION=${{ steps.version_info.outputs.project_version }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "Raw digest: $digest"
          if [[ "$digest" =~ ^sha256:[a-f0-9]{64}$ ]]; then
            echo "$digest" > "/tmp/digests/${digest#sha256:}"
            echo "Exported digest: ${digest#sha256:}"
          else
            echo "ERROR: Invalid digest format: $digest"
            exit 1
          fi

      - name: Upload digest
        uses: actions/upload-artifact@v4.6.2
        with:
          name: digests-${{ steps.platform_tags.outputs.platform_tag }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  manifest:
    name: Create Release Manifest
    runs-on: ubuntu-latest
    needs: [validate-tag, build]
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Get version information
        id: version_info
        run: |
          # Get rclone version from input
          RCLONE_VERSION="${{ github.event.inputs.rclone_tag }}"
          echo "rclone_version=${RCLONE_VERSION}" >> $GITHUB_OUTPUT

          # Get project version from VERSION file
          PROJECT_VERSION=$(cat VERSION)
          echo "project_version=${PROJECT_VERSION}" >> $GITHUB_OUTPUT

      - name: Create release manifest lists
        id: manifest_creation
        working-directory: /tmp/digests
        run: |
          echo "=== Available digest files ==="
          ls -la

          # Build digest references
          DOCKER_DIGESTS=""
          GHCR_DIGESTS=""

          for digest_file in *; do
            if [ -f "$digest_file" ]; then
              digest_content=$(cat "$digest_file")
              echo "Processing digest: $digest_content"
              DOCKER_DIGESTS="$DOCKER_DIGESTS ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}@$digest_content"
              GHCR_DIGESTS="$GHCR_DIGESTS ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}@$digest_content"
            fi
          done

          # Create release tag manifest lists
          RELEASE_TAG="${{ needs.validate-tag.outputs.release_version }}"

          echo "Creating manifest list for release tag: $RELEASE_TAG"
          if [ -n "$DOCKER_DIGESTS" ]; then
            docker buildx imagetools create --tag ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:$RELEASE_TAG $DOCKER_DIGESTS
          fi

          if [ -n "$GHCR_DIGESTS" ]; then
            docker buildx imagetools create --tag ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:$RELEASE_TAG $GHCR_DIGESTS
          fi

          # Also create latest tag
          echo "Creating manifest list for latest tag"
          if [ -n "$DOCKER_DIGESTS" ]; then
            docker buildx imagetools create --tag ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:latest $DOCKER_DIGESTS
          fi

          if [ -n "$GHCR_DIGESTS" ]; then
            docker buildx imagetools create --tag ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest $GHCR_DIGESTS
          fi

          # Create architecture-specific tags (LinuxServer.io style)
          platforms=("amd64" "arm64")
          for platform in "${platforms[@]}"; do
            arch_tag_release="${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:${platform}-$RELEASE_TAG"
            arch_tag_latest="${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:${platform}-latest"

            # Find matching digest for this platform
            digest_files=(*)
            case $platform in
              "amd64")
                if [ ${#digest_files[@]} -gt 0 ]; then
                  digest_content=$(cat "${digest_files[0]}")
                  docker buildx imagetools create --tag "$arch_tag_release" "${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}@$digest_content"
                  docker buildx imagetools create --tag "$arch_tag_latest" "${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}@$digest_content"
                fi
                ;;
              "arm64")
                if [ ${#digest_files[@]} -gt 1 ]; then
                  digest_content=$(cat "${digest_files[1]}")
                  docker buildx imagetools create --tag "$arch_tag_release" "${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}@$digest_content"
                  docker buildx imagetools create --tag "$arch_tag_latest" "${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}@$digest_content"
                fi
                ;;
            esac
          done

          # Get main manifest digest for SBOM
          MAIN_MANIFEST_DIGEST=$(docker buildx imagetools inspect --raw "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:$RELEASE_TAG" | sha256sum | cut -d' ' -f1)
          echo "main_manifest_digest=sha256:${MAIN_MANIFEST_DIGEST}" >> $GITHUB_OUTPUT

      - name: Generate SBOM attestation
        if: steps.manifest_creation.outputs.main_manifest_digest != ''
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.manifest_creation.outputs.main_manifest_digest }}
          push-to-registry: true

      - name: Run vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ needs.validate-tag.outputs.release_version }}
          format: 'table'
          exit-code: '0'

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          RELEASE_TAG="${{ needs.validate-tag.outputs.release_version }}"
          git tag -a "$RELEASE_TAG" -m "Release $RELEASE_TAG based on rclone ${{ github.event.inputs.rclone_tag }}"
          git push origin "$RELEASE_TAG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-tag.outputs.release_version }}
          name: ${{ needs.validate-tag.outputs.release_version }}
          generate_release_notes: true
          body: |
            ## 🎯 Release Information

            **Based on rclone:** ${{ github.event.inputs.rclone_tag }}
            **Project Version:** ${{ steps.version_info.outputs.project_version }}
            **Release Date:** ${{ github.event.head_commit.timestamp }}

            ${{ github.event.inputs.release_notes }}

            ## 🐳 Docker Images

            **Multi-Platform Support:**
            - `linux/amd64`
            - `linux/arm64`

            **Docker Hub:**
            ```bash
            docker pull ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:${{ needs.validate-tag.outputs.release_version }}
            ```

            **GitHub Container Registry:**
            ```bash
            docker pull ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ needs.validate-tag.outputs.release_version }}
            ```

            **Architecture-Specific Tags (LinuxServer.io style):**
            ```bash
            # AMD64
            docker pull ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:amd64-${{ needs.validate-tag.outputs.release_version }}

            # ARM64
            docker pull ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:arm64-${{ needs.validate-tag.outputs.release_version }}
            ```

            ## 🏗️ Built With

            - **rclone:** ${{ github.event.inputs.rclone_tag }}
            - **LinuxServer.io Alpine Baseimage:** 3.22
            - **S6 Overlay:** v3
            - **Multi-Architecture:** Native builds (no emulation)

            ## 🚀 Quick Start

            ```bash
            git clone https://github.com/mildman1848/rclone.git
            cd rclone
            make setup
            docker-compose up -d
            ```

            ## 🔒 Security

            This release includes:
            - Automated vulnerability scanning with Trivy
            - SBOM (Software Bill of Materials) attestation
            - Multi-platform security verification
            - Container hardening with LinuxServer.io standards

            ## 📖 Documentation

            - [English README](README.md)
            - [German README](README.de.md)
            - [Security Documentation](SECURITY.md)
            - [LinuxServer.io Compliance](LINUXSERVER.md)

            ---

            🤖 *This release was created automatically based on rclone ${{ github.event.inputs.rclone_tag }}*